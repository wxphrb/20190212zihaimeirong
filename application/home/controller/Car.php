<?php/** * Created by PhpStorm. * User: Administrator * Date: 2018/1/4 * Time: 10:28 */namespace app\home\controller;use app\home\model\IndustryInformation as IndustryInformationModel;use app\home\model\User;use mrmiao\encryption\RSACrypt;use think\Controller;use think\Db;use think\Request;use app\home\model\Address;use app\home\model\Car as CarModel;use app\home\model\Goods;use app\home\model\OrdersList;use app\home\model\Orders;use think\Cache;use think\Session;class Car extends Base{    /*     * 购物车---1、列表     */    public function index(Request $requests,CarModel $car){        $request = $requests->param();        $request['user_id'] = Session::get('user_id');        /* 多店铺        $data = Db::table('mx_car')->alias('c')            ->where([                'user_id'=>$request['user_id'],            ])            ->join('store s', 's.id=c.store_id', 'LEFT')            ->field('c.store_id,s.title,c.goods_id')            ->group('store_id')            ->select();        */            $data = Db::view('car','id,goods_id,num,price,attr,freight,create_time')                ->view('goods','title,picurl,goodsattr','car.goods_id=goods.id')                ->where(['car.user_id'=>$request['user_id']])                ->select();            foreach ($data as &$value){                $attr = explode('_', $value['attr']);                if(count($attr)>1){                    $value['attr_one'] = $attr[0];                    $value['attr_two'] = $attr[1];                }else{                    $value['attr_one'] = $attr[0];                    $value['attr_two'] = '';                }                $goodsattr = unserialize($value['goodsattr']);                if(!empty($goodsattr[$value['attr_one']])){                    $value['kucun'] = $goodsattr[$value['attr_one']]['kucun'];                }else{                    $value['kucun'] = 200;                }            }        $this->assign('mo_foot',2);        return $this->fetch(            'index',[                'title'=>"购物车",                'data'=>$data            ]        );    }     public function add(Request $requests,CarModel $car){         $request = $requests->param();         $request['user_id'] =Session::get('user_id');         $goods = $car->where(['user_id' => $request['user_id'], 'goods_id' => $request['goods_id'],'attr'=>$request['attr']])->find();         /*判断商品是否存在*/         if (empty($goods)) { //如果商品不存在             if (empty($request)) return ['code' => 200, 'message' => "请求参数有误"];             //$request['store_id'] = Db::name('goods')->where('id',$request['goods_id'])->value('store_id');             $result = $car->allowField(true)->isUpdate(false)->save($request);             if ($result) {                 return ['code' => 200, 'message' => '成功'];             } else {                 return ['code' => 400, 'message' => '失败'];             }         } else {             /*价格应该也加入  因为如果购物车有商品，但用户升级后 价格不统一*/             /*现 解决办法 升级后清空购物车*/             $result = $car->where(['user_id' => $request['user_id'], 'goods_id' => $request['goods_id'],'attr'=>$request['attr']])->setInc('num',$request['num']);             /*$result = $car->allowField(true)->where(['user_id' => $request['user_id'], 'goods_id' => $request['goods_id']])->update($request);*/             if ($result) {                 return ['code' => 200, 'message' => '成功'];             } else {                 return ['code' => 400, 'message' => '失败'];             }         }    }    public function car_order(Request $requests,CarModel $car){              $result=$requests->param();//              halt($result);              $result['user_id'] =Session::get('user_id');             $goods_list = Db::view('car','id as car_id,goods_id,num,freight,price,attr,create_time')                      ->view('goods','title,picurl','car.goods_id=goods.id')                      ->where(['car.user_id'=>$result['user_id'],'car.id'=>['in',$result['id']]])                      ->select();             if(empty($goods_list)){                 $this->error('该订单已提交','index/index');             };              $toprice = 0;//            $v['ceshi_yun'] += $v['freight'];              $goods_freight = 0;              $goods_num     = 0;              $goods_total   = 0;              foreach($goods_list as $vv){                    $toprice       += $vv['price'] * $vv['num'] + $vv['freight'];                    $goods_freight += $vv['freight'];                    $goods_num     += 1;                    $goods_total   += $vv['price'] * $vv['num'] + $vv['freight'];                    /*$vv['title']   = empty($vv['title']) ? "" : $vv['title'];                    $vv['picurl']  = empty($vv['picurl']) ? "" : $vv['picurl'];                    $goods_list['goods_freight'] = $goods_freight;                    $goods_list['goods_num']     = $goods_num;                    $goods_list['goods_total']   = $goods_total;*/              }                //wcc($goods_list);              $address_data = Db::name("address")                        ->field("id,username,mobile,prov,city,area,address,status")                        ->where(["user_id" => $result['user_id'], 'status' => 1])                        ->find();              $total = $toprice;              $adddres= empty($address_data) ? ['id'=>'','username'=>'','mobile'=>'','prov'=>'','city'=>'','area'=>'','address'=>'','status'=>'',] : $address_data;        //根据地址信息获取附近门店            if(!empty($adddres)){                $store = db('store')->field('id,title,area,address,mobile')->where(['city'=>$address_data['city'],'status'=>1])->select();            }else{                $store = '';            }//              halt($address_data);              return $this->fetch(                        'order',[                           'title'         => "购物车",                           'goods_list'    => $goods_list,                           'address'       => $adddres,                           'total'         => $total,                           'car_id'        => $result['id'],                           'store'         => $store,                           'time'          => date('Y-m-d H:i:s')                        ]              );    }    public function order_submit(Request $requests,CarModel $car){        $request = $requests->param();        $request['user_id'] = Session::get('user_id');        //到店自提        if($request['type'] == 'ddzt'){            $car_arr['username'] = $request['username'];            $car_arr['address']  = '';            $car_arr['store_id'] = $request['store_id'];            $car_arr['mobile']   = $request['mobile'];            $car_arr['pay_type'] = 2;        }else{        //快递到付            $address = Address::get($request['address_id']);            $car_arr['username'] = $address['username'];            $car_arr['address']  = $address['prov'].$address['city'].$address['area']. $address['address'];            $car_arr['store_id'] = 0;            $car_arr['mobile']   = $address['mobile'];            $car_arr['pay_type'] = 1;        }        /*        $goods_list = Db::view('car','id as car_id,goods_id,num,freight,price,attr,create_time')            ->view('goods','title,picurl','car.goods_id=goods.id')            ->where(['car.user_id'=>$request['user_id'],'car.id'=>['in',$request['car_id']]])            ->select();        */        $data=[];//        halt((array)$request['message']);//        Db::startTrans();//        try {        $car_order_sn=[];            $data= Db::view('car')                ->view('goods','title as goods_title,picurl,goodsattr ','car.goods_id=goods.id')                ->where('car.id','in',$request['car_id'])                ->select();            $order_sn = date('Ymd', time()) . rand(1000000,9999999);//订单号            $price = 0;            $freight=0;            foreach($data as $vv){                $goodsattr = unserialize($vv['goodsattr']);                if(!empty($goodsattr[$vv['attr']]['kucun'])){                    $kucun = intval($goodsattr[$vv['attr']]['kucun']);                    if($kucun < $vv['num']){                        return ['code' => 400, 'message' => $vv['goods_title'].'库存不足，请调整购买量'];                    }                };                $price += $vv['price']*$vv['num'];                //$freight += $vv['freight']*$vv['num'];            }                $car_arr['order_sn'] = $order_sn;               // 'username' => !empty($address_data['username']) ? $address_data['username'] : '',                //'address' => $address_data['prov'] . $address_data['address'],                //'mobile' => !empty($address_data['mobile']) ? $address_data['mobile'] : '',                //'message' => !empty($request['message'][$i]) ? $request['message'][$i] : '',                $car_arr['goods_price'] = $price;                $car_arr['user_id'] = Session::get('user_id');                $car_arr['freight'] = $freight;                $car_arr['create_time'] = time();                $car_arr['total']    = $freight + $price;               // 'pay_type'=> !empty($request['pay_type']) ? $request['pay_type'] : '',            $car_order_sn[] = $order_sn;            $temporary_level = db('user')->where('id',$request['user_id'])->value('temporary_level');            if($temporary_level > 0){                //该临时等级 需一次性购买的金额                $level_money = get_config('agent'.$temporary_level);                if($request['goods_price']<$level_money){                    return ['code' => 400, 'message' => "您的下单金额不足申请等级标准"];                }            }            //循环当前店铺的购买的商品生成订单商品表            Db::name("Orders")->insert($car_arr);            foreach($data as $vv){                //插入订单商品表                Db::name("orders_list")->insert([                    'order_sn'     =>  $order_sn,                    'goods_title'  => $vv['goods_title'],                    'goods_id'     => $vv['goods_id'],                    'num'          => $vv['num'],                    'goods_picurl' => $vv['picurl'],                    'goods_price'  => $vv['price'],                    'goods_attr'   => $vv['attr'],                    'create_time' => time(),                ]);            }        Db::commit();        $merge_sn     = date('Ymd', time()) . rand(666666,999999);//合并的订单的总id        $all_order_sn = implode(',',$car_order_sn);        Db::name('orders_merge')->insert(['order_sn'=>$all_order_sn,'merge_sn'=>$merge_sn]);            Db::name('car')->where('id','in',$request['car_id'])->delete();        return ['code' => 200,                'message' => '成功',                'data'=>$merge_sn,                'rdo'=>!empty($request['pay_type']) ? $request['pay_type'] : '',                'order_sn'=>!empty($order_sn) ? $order_sn : '',                'type'=>1,                'goods_price'=>!empty($request['goods_price']) ? $request['goods_price'] : '',                'car_id'=>$request['car_id'],        ];//        return ['code' => 200, 'message' => '成功','data'=>$merge_sn,'rdo'=>$request['pay_type'],'order_sn'=>$merge_sn,'type'=>1];//        } catch (\Exception $e) {//            Db::rollback();//            return $crypt->response(['code' => 400, 'message' => '数据错误等待处理！']);//        }    }    public function edit(Request $requests,CarModel $car){        $request = $requests->param();        $request['user_id'] = Session::get('user_id');        $data = Db::table('mx_car')->alias('c')            ->where([                'user_id'=>$request['user_id'],            ])            ->join('store s', 's.id=c.store_id', 'LEFT')            ->field('c.store_id,s.title,c.goods_id')            ->group('store_id')            ->select();        foreach($data as &$v){            $v['goods'] = Db::view('car','id,goods_id,num,price,attr,freight,create_time')                ->view('goods','title,picurl,store_id','car.goods_id=goods.id')                ->where(['car.store_id'=>$v['store_id'],'car.user_id'=>$request['user_id']])                ->select();        }        foreach ($data as &$v) {            foreach ($v['goods'] as &$value){                $attr = explode('_', $value['attr']);                if(count($attr)>1){                    $value['attr_one'] = $attr[0];                    $value['attr_two'] = $attr[1];                }else{                    $value['attr_one'] = $attr[0];                    $value['attr_two'] = '';                }            }        }                return $this->fetch(            'edit',[                'title'=>"购物车编辑",                'data'=>$data            ]        );    }   public function chooseArr(Request $request,CarModel $car){             $param = $request->param();             $goods = Db::name('goods')->where('id',$param['goods_id'])->field('attr,title,picurl')->find();             $goods['attr'] = unserialize($goods['attr']);             $choose_attr = explode('_',$param['attr']);             $attr_one=$choose_attr[0];             $attr_two=$choose_attr[1];              echo'<div class="content">';              echo'<img src="img/close_btn_03.png" class="shopcar_close" style="position: absolute;right: 2%;top: -0.3rem;width: 0.7rem">' ;              echo'<div class="d1">';              echo'<img src="img/find_bottom_img_05.png">';              echo'<div class="right">';              echo'<p class="name">'.$goods['title'].'</p>';              echo'<p class="price">￥'.$param['price'].'</p>';              echo'</div>';              echo'</div>';              foreach($goods['attr'] as $vo){                        echo'<div class="d2">';                        echo'<p class="p1">选择'.$vo['title'].'</p>';                        echo'<ul class="cans">';                        foreach($vo['attrs'] as $vv){                                  if($attr_one==$vv){                                            echo' <li class="cans_style" onclick="attr('.$param['goods_id'].')">'.$vv                                                      .'</li>';                                  }elseif($attr_two==$vv){                                            echo' <li class="cans_style" onclick="attr('.$param['goods_id'].')">'.$vv.'</li>';                                  }else{                                            echo' <li onclick="attr('.$param['goods_id'].')">'.$vv.'</li>';                                  }                        }                        echo'</ul>';                        echo'</div>';              }              echo' <input type="button" class="join_shop_btn" onclick="choose('.$param['car_id'].')" value="确定">';              echo'</div>';   }          public function editAttr(Request $request,CarModel $car){                    $param   = $request->param();                    $id_arr  = explode(',',$param['id']);                    $num_arr = explode(',',$param['num']);                    for($i = 0;$i<count($id_arr);$i++){                        $data[$i]['id']  = $id_arr[$i];                        $data[$i]['num'] = $num_arr[$i];                    }                    $result= $car->allowField(true)->isUpdate(true)->saveAll($data);                    if ($result){                        return ['code' => 200, 'message' => '修改成功'];                    }else{                        return ['code' => 400, 'message' => '修改失败'];                    }          }          public function del(Request $request,CarModel $car){                    $param = $request->param();                    $result= $car->where('id','in',$param['id'])->delete();                    if ($result){                             return ['code' => 200, 'message' => '删除成功'];                    }else{                             return ['code' => 400, 'message' => '删除失败'];                    }          }}