<?phpnamespace app\home\controller;use app\home\model\Banner;use app\home\model\Goods;use app\home\model\Store;use app\home\model\Orders as OrderModel ;use think\Controller;use think\Db;use think\Request;use think\Session;use think\Url;class Orders extends Base{    /*     * 我的订单（全部）     * */  public function index(){            $request = Request::instance()->param();            $request['user_id'] = Session::get('user_id');            $where = ['state' => 1];            //消息跳转 修改已读状态          Db::name('news_info')->where(['user_id'=>$request['user_id'],'read_state'=>0,'type'=>7])->update(['read_state'=>1]);            //订单状态      $request['status'] = isset($request['status']) ? $request['status'] : '11';        if($request['status']!=''){          switch ($request['status']) {              case 111:                  $where['status'] = '0';                  break;  //待付款              case 1:                  $where['status'] = ['in', '1'];                  break;  //待发货              case 2:                  $where['status'] = ['in', '2'];                  break;   //待收货              case 3:                  $where['status'] = ['in', '3'];                  break;   // 待评价              case 4:                  $where['status'] = ['in', ' 5,7,8,9'];                  break;   //售后              default://                  $where['status'] = "";          }        }            if(!empty($request['keyword'])){                      $where['order_sn|title']=['like','%'.$request['keyword'].'%'];            }            $where['user_id'] = Session::get('user_id');          $data =Db::name("orders")                 ->field("id,order_sn,total,store_id,status,user_id,create_time,remind")                 ->where($where)                 ->order('id DESC')                 ->select();            foreach($data as &$v){                      $v['orderlist'] = Db::view('orders_list',['num', 'goods_attr','goods_picurl', 'goods_price','goods_title'])                                ->view('goods','id','orders_list.goods_id=goods.id')                                ->where(['order_sn'=>$v['order_sn']])                                ->select();                      foreach ($v['orderlist']  as &$vv) {                                $vv['goods_attr'] = str_replace("_", ',', $vv['goods_attr']);                      }            }        //wcc($data);            if($request['status'] == 11) {                  return $this->fetch(                        'index',[                                  'list'=>$data,                                  'title'=>"我的订单",                        ]                  );            }            if($request['status'] == 111) {                  return $this->fetch(                    'index1',[                          'list'=>$data,                          'title'=>"我的订单(待付款)",                    ]                  );            } elseif($request['status'] == 1) {                      return $this->fetch(                            'index2',[                                    'list'=>$data,                                    'title'=>"我的订单(待发货)",                            ]                      );            } elseif($request['status'] == 2) {                  return $this->fetch(                        'index3',[                              'list'=>$data,                              'title'=>"我的订单（待收货）",                        ]                  );            } elseif($request['status'] == 3) {                    return $this->fetch(                        'index4',[                            'list'=>$data,                            'title'=>"我的订单（待评价）",                        ]                    );            } elseif($request['status'] == 4) {                return $this->fetch(                    'index5',[                            'list'=>$data,                            'title'=>"我的订单（退款）",                    ]                );            }  }     /*提醒发货*/     public function remind(Request $requests){         $request   = $requests->param();         $order_sn  = $request['order_sn'];         $row       =  db('orders')->where('order_sn',$order_sn)->update(['remind'=>1]);        if($row){            return ['code'=>200,'message'=>'提醒成功'];        }else{            return ['code'=>400,'message'=>'提醒异常'];        }     }    /*确定收货订单*/    public function take_goods(Request $requests, OrderModel $orders)    {        $request = $requests->param();        $result = $orders->where(['order_sn' => $request['order_sn']])->setField("status", 3);        if ($result) {            return ['code' => 200, 'message' => '成功'];        } else {            return ['code' => 400, 'message' => '失败'];        }    }    /*删除订单(逻辑删除)*/    public function order_del(Request $requests, OrderModel $orders)    {        $request = $requests->param();        $result = $orders->where(['order_sn' => $request['order_sn']])->setField("state", 0);        if ($result) {            return ['code' => 200, 'message' => '成功'];        } else {            return ['code' => 400, 'message' => '失败'];        }    }    public function receipt(Request $requests ,OrderModel $orders)    {        $request = $requests->param();        $data['status'] = 3;        $result  = $orders->where(['order_sn'=>$request['order_sn']])->update($data);        if ($result) {            return ['code' => 200, 'message' => '成功'];        } else {            return ['code' => 400, 'message' => '失败'];        }    }    public function refund_goods(Request $requests ,OrderModel $orders){        $request = $requests->param();        $order = $orders->where('order_sn',$request['ordersn'])->find();        $data = Db::name('store')->where('id',$order['store_id'])->field('mobile,address,manned')->find();        if($requests->isPost()){            $request = $requests->param();            $request['type']=2;            $request['name'] = $data['manned'];            $request['address'] = $data['address'];            $request['mobile'] = $data['mobile'];            $request['name'] = $data['manned'];         $res =  Db::name('cause')->insert($request);            if($res){                $orders->where('order_sn',$request['ordersn'])->update(['status'=>8]);                return ['code' => 200, 'message' => '申请退货成功'];            }else{                return ['code' => 400, 'message' => '申请退货失败'];            }        }else{            $content= Db::name('info')->where('id',6)->value('content');            return $this->fetch(                'refund_goods',[                    'data'=>$data,                    'order'=>$order,                    'content'=>$content,                    'title'=>"申请退货",                ]            );        }    }      /*      * 线下支付      * */      public function online(Request $request, OrderModel $orders){            $data  = $request->param();//            halt($data);            Db::startTrans();            try {                  if ($data['type'] == '1') {  //  合并支付                        $order_merga = Db::name('orders_merge')->where('merge_sn', $data['order_sn'])->find();//合并的订单表                        if ($order_merga['status'] == '0') {//未支付                              $order_sn = explode(',', $order_merga['order_sn']);                              foreach ($order_sn as $v) {                                    $orders = Db::name('orders')->where('order_sn', $v)->value('status');                                    if ($orders == '0') {                                        Db::name('orders')->where('order_sn', $v)->update(['status' => 0, 'pay_type' => 3]);                                    }                              }                              $order_merga = Db::name('orders_merge')->where('merge_sn', $data['order_sn'])->update(['status' => 1]);                        }                  } else {                        // 修改订单支付状态                        $data = Db::name('orders')->where('order_sn', $data['order_sn'])->select();                        foreach ($data as $v) {                              if ($v['status'] == '0') {                                    Db::name('orders')->where('id', $v['id'])->update(['status' => 0, 'pay_type' => 3]);                              }                        }                  }                  return ['code' => 200, 'message' => '支付成功'];            } catch (\Exception $e) {                  Db::rollback();                  return ['code' => 400, 'message' => '数据错误等待处理！'];            }      }    public function refund_money(Request $requests ,OrderModel $orders){        $request = $requests->param();        $order = $orders->where('order_sn',$request['ordersn'])->find();        if($requests->isPost()){            $request = $requests->param();            $request['type']=1;            $res =  Db::name('cause')->insert($request);            if($res){                $orders->where('order_sn',$request['ordersn'])->update(['status'=>5]);                return ['code' => 200, 'message' => '申请退款成功'];            }else{                return ['code' => 400, 'message' => '申请退款失败'];            }        }else{            $content= Db::name('info')->where('id',6)->value('content');            return $this->fetch(                'refund_money',[                    'data'=>$order,                    'content'=>$content,                    'title'=>"申请退款",                ]            );        }    }          /*          * 合并支付          * */          public function  ordersMerge(Request $requests){                    $request = $requests->param();                    $merge_sn = date('Ymd', time()) . rand(666666,999999);//合并的订单的总id                    $data = Db::name('orders_merge')->insert(['order_sn'=>$request['order_sn'],'merge_sn'=>$merge_sn]);                    if($data){                              return ['code' => 200, 'message' => '成功','merge_sn'=>$merge_sn,'orer_sn'=>$request['order_sn']];                    }          }    /*         * 去评价         * */    public function  comment(Request $requests){        $request = $requests->param();        return $this->fetch(            'comment',[                'title'=>"去评价",            ]        );    }    /**     * 搜索     */    public function search(){        return $this->fetch(            'search', ['title' => '搜索']        );    }}