<?php/** * Created by PhpStorm. * User: Administrator * Date: 2018/1/4 * Time: 10:28 */namespace app\home\controller;use app\home\model\GoodsType as GoodsTypeModel;use app\home\model\Goods as GoodsModel;use app\home\model\OrdersList;use app\home\model\Orders;use app\home\model\User;use app\home\model\Address;use think\Config;use think\Controller;use think\Db;use think\Request;use think\Session;use app\home\model\Share;class Goods extends Base{    /*    protected function initialize()    {        //需要调用`Model`的`initialize`方法        parent::initialize();    }    */    /*     * 商品---1、列表     */    public function index(Request $requests, User $user, GoodsModel $goods){        $request =$requests->param();        $where['status'] = 1;        $user_id  = Session::get('user_id');        $level_id = 0;        if(!empty($user_id)){            $level =  $user->where('id',$user_id)->field('level_id,temporary_level')->find();            if($level['temporary_level']>0){                $level_id = $level['temporary_level'];            }else{                $level_id = $level['level_id'];            }        }        if (!empty($request['keyword'])) {            $where['title'] = ['like', '%' . $request['keyword'] . '%'];        }else{            $request['keyword']='';        }        if(!empty($request['goodstype_id'])){            $where['typeid'] = $request['goodstype_id'];        }else{            $request['goodstype_id']='';        }        if(isset($request['transform'])){            $this->assign('transform',$request['transform']);        }else{            $this->assign('transform',3);        }        $map = '';        if(!empty($request['sell'])){            switch ($request['sell']) {                case 1:                    $map['sell'] = "asc";                    break;   //销量正序                case 2:                    $map['sell'] = "desc";                    break;            }}else{            $request['sell']='';        }        if(!empty($request['saleprice'])){            switch ($request['saleprice']) {                case 1:                    $map['saleprice'] = "asc";                    break;   //销量正序                case 2:                    $map['saleprice'] = "desc";                    break;            }}else{            $request['saleprice']='';        }        $data = $goods->goods_regroup($where,$map,$level_id);       /* $data = db('goods')->where($where)            ->field('id,sell,title,picurl,saleprice,kucun_all,goodsattr')            ->order('id desc')            ->order($map)            ->select();        //对应等级显示对象价格        if(!empty($level_id) && $level_id>0){            foreach($data as &$v){                $goodsattr = unserialize($v['goodsattr']);                foreach($goodsattr as $kk=>$vv){                    $ext = 'price'.$level_id;                    $v['saleprice']   = $vv[$ext];                    $v['kucun']       = $vv['kucun'];                    $v['gg']          = $kk;                    break;                }            }        }*/        //$prov = Db::name('cn_prov')->select();        return $this->fetch(            'index',[                'title'        => "商品列表",                'data'         => $data,                'sell'         => $request['sell'],                'saleprice'    => $request['saleprice'],                'goodstype_id' => $request['goodstype_id'],                'keyword'      => $request['keyword'],                'level_id'     => $level_id,                //'prov'=>$prov,            ]        );    }    public function info(GoodsModel $goods, User $user, Request $requests){        $request = $requests->param();        /* $jssdk = new Share("", "");        $signPackage = $jssdk->GetSignPackage();*/        $request['user_id'] = Session::get('user_id');        $mobile =  $user->where('id',$request['user_id'])->value('mobile');        if(empty($mobile)){            $this->error('请绑定手机号查看','login/register');        }        $data = $goods->where('id', $request['id'])->field('id,picarr,title,picurl,typeid,saleprice,specifications,sell,content,attr,goodsattr,kucun_all')->find();        $data['picarr']   = !empty($data['picarr']) ? unserialize($data['picarr']) :[];        if(!empty($data['attr'])){            $data['attr'] = !empty($data['attr']) ? unserialize($data['attr']) :[];        }        if(!empty($request['user_id']) && $request['user_id']>0){            $level =  $user->where('id',$request['user_id'])->field('level_id,temporary_level')->find();            if($level['temporary_level']>0){                $level_id = $level['temporary_level'];            }else{                $level_id = $level['level_id'];            }            Session::set('level_id',$level_id);            $ext = 'price'.$level_id;        }else{            $ext = 'price';        }        if(!empty($data['goodsattr'])){            $test = unserialize($data['goodsattr']);            foreach ($test as $key => &$item) {                $item['shuxing'] = $key;                $data['goodsattr'] = ['price'=>$item[$ext],'kucun'=>$item['kucun']];                $data['sellprice']     = $item[$ext];            }             //= array_values($test);        }        $data['carriage']       =  0 ;        $data['appraise_count'] = Db::name('evaluate')->where(['goods_id'=>$request['id']])->count();        if($request['user_id'] != ''){            $collect = Db::name("collection")                ->where([                    'type' => 1,                    "collection_id" => $request['id'],                    'user_id'=>$request['user_id']                ])                ->find();            $data['collection_id'] = empty($collect['id']) ? "" :$collect['id'] ;            $data['collection'] = empty($collect) ? 0 : 1;        }else{            $data['collection_id'] = "";            $data['collection'] =0;        }        /* 评价        $evaluates= Db::view('evaluate', 'picarr,type,content,user_id,anonymous,create_time')    //            ->view('user', 'username,picarrurl', 'user.id=evaluate.user_id')            ->where(['evaluate.goods_id' => $request['id'], 'evaluate.status' => 1])            ->select();        if(!empty($evaluates)){            foreach ($evaluates as &$v) {                $v['picarr'] = !empty($v['picarr'])?unserialize($v['picarr']):[];                $v['username'] = Db::name("user")->where("id",$v['user_id'])->value("username");                $v['picurl'] = Db::name("user")->where("id",$v['user_id'])->value("picurl");            }        }*/    //    dump($data);die;        /*分享接口*/        $url = $requests->host().'/home/goods/info?id='.$data['id'];        $signPackage = [            'appId'=>'',            'timestamp'=>'',            'nonceStr'=>'',            'signature'=>'',        ];        return $this->fetch(            'info',[                'title'=>"商品详情",                'data'=>$data,                //'evaluates'=>$evaluates,                'share'=>$signPackage,                'url'=>$url,            ]        );    }    public function chooseAttrs(Request $requests,User $user,GoodsModel $goods){                $request  = $requests->param();                $user_id  = Session::get('user_id');                $level    =  $user->where('id',$user_id)->field('level_id,temporary_level')->find();                if($level['temporary_level']>0){                    $level_id = $level['temporary_level'];                }else{                    $level_id = $level['level_id'];                }                $data['goodsattr']= $goods->where('id',$request['id'])->value('goodsattr');                if(!empty($data['goodsattr'])){                          $test = unserialize($data['goodsattr']);                          foreach ($test as $key => &$item) {                                    $item['shuxing'] = $key;                          }                          $data['goodsattr'] = array_values($test);                }                $price = '';                $kucun='';                foreach($data['goodsattr'] as $v){                          if($v['shuxing']==$request['str']){                                    $ext    = 'price'.$level_id;                                    $price  = $v[$ext];                                    $kucun = $v['kucun'];                          }                }               return ['code'=>200,'kucun'=>$kucun,'price'=>$price];          }    public function search(Request $requests){        $request =$requests->param();        return $this->fetch('search',            [                'title'=>"搜索",                'goodstype_id'=>$request['goodstype_id']            ]        );    }    /*--生成订单 多条*/    public function create_orders(Request $requests, Address $address, GoodsModel $goods)    {        $request = $requests->param();        $request['user_id'] = Session::get('user_id');        $goods_list = Db::view('goods', 'store_id')            ->view('store', 'title', 'goods.store_id=store.id', 'left')            ->where('goods.id', $request['goods_id'])            ->select();        $total=0;        foreach ($goods_list as &$v) {            if ($v['store_id'] == 0) {                $v['title'] = '后台自营';            }            //$v['goods_freight'] = $request['freight'];            $v['goods_num'] = 1;            $v['goods_total'] = $request['freight'] + $request['price'] * $request['num'];            $v['goods'] = $goods->where("id", $request['goods_id'])->field("id as goods_id,store_id,title,picurl")->select();            $total =  $v['goods_total'];        }        foreach ($goods_list as $v) {            foreach ($v['goods'] as $vv) {                $vv['attr'] = $request['attr'];                $vv['num'] = $request['price'];                $vv['price'] = $request['price'];            }        }        if(!empty($request['address_id'])){                  $address_data = $address->where(['id' => $request['address_id']])->field("id,username,mobile,prov,                  address")->find();        }else{                  $address_data = $address->where(['user_id' => $request['user_id'], 'status' => 1])->field("id,username,mobile,prov,address")->find();                  if (empty($address_data)) {                            $address_data = $address->where(['user_id' => $request['user_id']])->order("id desc")->field("id,username,mobile,prov,address")->find();                  }        }        $addresss= empty($address_data) ? ['id'=>'','username'=>'','mobile'=>'','prov'=>'','address'=>'','status'=>'',] : $address_data;        return $this->fetch(            'order',[                'title'=>"生成订单",                'data'=>$goods_list,                'address'=>$addresss,                'total'=>$total            ]        );    }    /*--生成订单*/    public function create_order(Request $requests, Address $address, GoodsModel $goods)    {        $request = $requests->param();        $this->addobj = db('address');        $request['user_id'] = Session::get('user_id');        $level_id           = Session::get('level_id');        if(empty($request['user_id'])){            $this->error('登录超时，请重新登录','home/index');        }        $user = db('user')->where('id',$request['user_id'])->field('level_id,mobile,temporary_level')->find();        if(empty($user)){            $this->error('用户信息错误');        }        if($user['temporary_level']>0){            $level_id = $user['temporary_level'];        }else {            $level_id = $user['level_id'];        }        $mobile   = $user['mobile'];        if(empty($mobile)){            $this->error('请先绑定手机号','login/register');        }        $data = db('goods')->field('id,status,goodsattr,title,picurl')            ->where('id',$request['goods_id'])            ->find();        if($data['status'] == 0){            $this->error('该商品已下架，请联系管理员购买');        }        $data['price']    = 0;        $data['carriage'] = 0;        $data['num']  = $request['num'];        $data['attr'] = $request['attr'];        if(empty($request['attr']) || empty($request['num'])){            $this->error('参数错误，请重新选择购买');        }        if (!empty($data['goodsattr'])) {            $test = unserialize($data['goodsattr']);            foreach ($test as $key => &$item) {                $item['shuxing'] = $key;                if($key==$request['attr']){                    $ext    = 'price'.$level_id;                    $data['price']  = $item[$ext];                    $data['kucun']  = $item['kucun'];                }            }        }        //购买量不能大于库存        if($data['num'] > $data['kucun']){            $this->error('库存不足，请在库存量内购买或联系客服');        }        $data['total'] = $data['price']*$data['num']+$data['carriage'];        $data['goods_price'] = $data['price']*$data['num'];              if(!empty($request['address_id'])){                        $address_data = $this->addobj->where(['id' => $request['address_id']])->field("id,username,mobile,prov,city,area,address")->find();              }else{                        $address_data = $this->addobj->where(['user_id' => $request['user_id'], 'status' => 1])->field("id,username,mobile,prov,city,area,address")->find();                        if (empty($address_data)) {                                  $address_data = $this->addobj->where(['user_id' => $request['user_id']])->order("id desc")->field("id,username,mobile,prov,city,area,address")->find();                        }              }        $addresss= empty($address_data) ? ['id'=>'','username'=>'','mobile'=>'','prov'=>'','address'=>'','status'=>'',] : $address_data;        //根据地址信息获取附近门店        if(!empty($address_data)){            $store = db('store')->field('id,title,area,address,mobile')->where(['city'=>$address_data['city'],'status'=>1])->select();        }else{            $store = '';        }        //wcc($addresss);        /*        //'222.171.139.210';        $ip = getIP();        $ip = '222.171.139.210';//测试哈尔滨的id        $curl_url = 'http://ip.taobao.com/service/getIpInfo.php?ip='.$ip;        $get_res  = Get_curl($curl_url);        wcc($get_res);        */        return $this->fetch(            'order',[                'title'   => "生成订单",                'data'    => $data,                'store'    => $store,                'address' => $addresss,                'time'    => date('Y-m-d H:i:s')            ]        );    }    /*--提交订单*/    public function place_order(Request $requests,GoodsModel $goods)    {        $request = $requests->param();        $request['user_id'] = Session::get('user_id');        $good = $goods::get($request['goods_id']);//        Db::startTrans();//        try {            $request['order_sn'] = date('Ymd', time()) . rand(1000000,9999999);            //到店自提            if($request['type'] == 'ddzt'){                $request['username'] = $request['username'];                $request['address']  = '';                $request['store_id'] = $request['store_id'];                $request['mobile']   = $request['mobile'];                $request['pay_type'] = 2;            }else{                $address = Address::get($request['address_id']);                $request['username'] = $address['username'];                $request['address']  = $address['prov'].$address['city'].$address['area']. $address['address'];                $request['store_id'] = 0;                $request['mobile']   = $address['mobile'];                $request['pay_type'] = 1;            }            $request['good_name'] = $good['title'];            $request['freight'] = $request['carriage'];            $request['create_time'] = time();            $request['total'] = $request['carriage'] + $request['goods_price'];            $request['goods_title'] = $good['title'];            $request['goods_picurl'] = $good['picurl'];            $request['goods_attr'] = $request['attr'];            $temporary_level = db('user')->where('id',$request['user_id'])->value('temporary_level');            if($temporary_level > 0){                //该临时等级 需一次性购买的金额                $level_money = get_config('agent'.$temporary_level);                if($request['total']<$level_money){                    return ['code' => 400, 'message' => "您的下单金额不足申请等级标准"];                }            }            $a = new Orders();            $a->allowField(true)->isUpdate(false)->save($request);            $b = new OrdersList();            $b->allowField(true)->isUpdate(false)->save($request);//            Db::commit();            return ['code' => 200, 'message' => "成功",'order_sn'=> $request['order_sn'],'par_type'=>$request['pay_type']];////        } catch (\Exception $e) {////            Db::rollback();////            return ['code' => 400, 'message' => '数据错误等待处理'];////        }    }}