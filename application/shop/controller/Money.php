<?phpnamespace app\shop\controller;use think\Db;use think\Request;use think\Session;use think\Url;use app\shop\model\StoreRecord as ThisModel;use app\shop\model\StoreMember;use app\shop\model\Card;use app\shop\model\StoreProject;class Money extends Base{    /**	 * [index description]列表	 * @return [type] [description]	 */	public function index()	{        $where = ['r.type'=>2];        $data = ThisModel::alias('r')            ->join('store_member m','r.member_id=m.id','right')            ->where('r.store_id',Session::get('shop_id'))            ->where($where)            ->field('m.username,m.mobile,m.account,r.money,r.content,r.create_time,r.id,r.type,r.member_lv,r.member_id,m.level_lv')            ->order('r.id', 'desc')->select();        return $this->fetch('index', [            'list'       => $data        ]);	}	/**     * [create description]添加方法     * @return [type] [description]     */	public function create()	{		if (Request::instance()->isPOST())		{			$data = Request::instance()->post();            $data['money']        = $data['account'];            $data['store_id']     = Session::get('shop_id');			$result = ThisModel::saveVerify($data);			if (true === $result) {                $leve_arr  = ['普通会员','银卡','金卡','钻石卡'];			    if($data['level_lv']!=0){                    $member_id = ThisModel::where('mobile',$data['mobile'])->value('id');                    //佣金分成                    $data_re = [                        'store_id'    => Session::get('shop_id'),                        'money'       => $data['account'],                        'content'     => '办理'.$leve_arr[$data['level_lv']],                        'type'        => 1,                        'create_time' => time(),                        'member_lv'   => $data['level_lv'],                        'member_id'   => $member_id,                    ];                    $this->obj = db('store_record');                    $this->obj->insert($data_re);                }                $commission = 0;                $rate       = 0;                if(!empty($data['invited_shop_id']) &&$data['level_lv']!=0){                    switch ($data['level_lv']){                        case 1;                            $rate = '0.2';                            break;                        case 2;                            $rate = '0.3';                            break;                        case 3;                            $rate = '0.4';                            break;                    }                    $commission = round($data['account']*$rate,2);                    ThisModel::where('id',$data['invited_shop_id'])->setInc('money',$commission);                    ThisModel::where('id',$data['invited_shop_id'])->setInc('account',$commission);                    $data_yong = [                        'store_id'    => Session::get('shop_id'),                        'money'       => $commission,                        'content'     => '推荐'.$data['mobile'].'办理'.$leve_arr[$data['level_lv']],                        'type'        => 2,                        'create_time' => time(),                        'member_id'   => $data['invited_shop_id'],                    ];                    $this->obj->insert($data_yong);                }                $this->success('添加成功', 'shop/User/index');            } else {                $this->error($result);            }		}		$param = $this->appendarg();		return $this->fetch('create', $param);	}	public function ajax_data(){		//地址添加 无用		$data = Request::instance()->post();		/*		foreach($data['arr'] as $k=>$v){			$par['name']  = $v['label'];			$par['code']  = $v['value'];			$par['code_all']  = $v['value'];			$par['p_id']  = 0;			db('city')->insert($par);					}		*/		$this->obj = db('city');		/*		foreach($data['arr'] as $vvv){			foreach($vvv as $vv){				$vv_id = substr($vv['value'],0,2);				$par['p_id'] = $this->obj->where('code_all',$vv_id)->value('id');				$par['name'] = $vv['label'];				$par['code'] = substr($vv['value'],2,4);				$par['code_all'] = $vv['value'];				$this->obj->insert($par);			}					}		*/				$arr = json_decode($data['arr'],true);		foreach($arr as $kkk=>$vvvv){						foreach($vvvv as $vvv){				foreach($vvv as $vv){					$vv_id = substr($vv['value'],0,4);					$par['p_id'] = $this->obj->where('code_all',$vv_id)->value('id');					$par['name'] = $vv['label'];					$par['code'] = substr($vv['value'],4,6);					$par['code_all'] = $vv['value'];					$this->obj->insert($par);				}											}					}			}    /**     *  向总后台提交申请 升级代理商级别     *     * */    public function uplv($id){        if (Request::instance()->isPOST())        {            $data = Request::instance()->post();            $data['create_time'] = time();            $data['status']      = 0;            $data['store_id']    = Session::get('shop_id');            $result = db('user_tmp')->insert($data);            if ($result) {                $this->success('申请已提交', 'shop/User/index');            } else {                $this->error($result);            }        }        $infoclass = db::name('certification_type')->field('id,title')->select();        $data = ThisModel::where('store_id',Session::get('shop_id'))->find($id);        $this->assign('vo',$data);        $this->assign('infoclass',$infoclass);        return $this->fetch('uplv');    }    /**     * [update description]更新方法     * @param  [type] $id [description]主键id     * @return [type]     [description]     */	public function update($id)	{		if (Request::instance()->isPOST())		{			$data = Request::instance()->post();			if($data['level_lv'] != 0){                if (count($data['pid']) != count(array_unique($data['pid']))) {                    $this->error('会员信息含有重复项');                    return false;                }                foreach($data['con'] as $k=>$v){                    if(empty($v) || empty($data['num'][$k]) ){                        $this->error('参数不完整', 'shop/user/index');                    }                    $content[] = [                        'con'=>$v,                        'num'=>$data['num'][$k],                        'pid'=>$data['pid'][$k],                    ];                }                $data['content'] = serialize($content);            }			$result = ThisModel::saveVerify($data,$id);			if (true === $result) {                $this->success('更新成功', 'shop/User/index');            } else {                $this->error($result);            }		}		$data = ThisModel::where('store_id',Session::get('shop_id'))->find($id);        $data['content'] = unserialize($data['content']);		$param = array_merge(['vo'=>$data], $this->appendarg());		return $this->fetch('create', $param);	}	/*传递会员卡等级默认信息*/	public function getmenu(Card $card){        $data = Request::instance()->post();        $id   = $data['id'];        $res  = $card->where('id',$id)->find();        if(empty($res)){            return ['code'=>400,'msg'=>'数据错误'];        }else{            return ['code'=>200,'data'=>json_encode(unserialize($res['content']))];        }    }    /**     * 添加修改时候需要传递参数的话，用此方法，只写一遍     */	public function appendarg(){	    //$prov_data = db::name('cn_prov')->field('code,name')->select();        $infoclass = [                ['id'=>0,'title'=>'普通用户'],                ['id'=>1,'title'=>'银卡'],                ['id'=>2,'title'=>'金卡'],                ['id'=>3,'title'=>'钻石卡'],         ];				        $member_list = ThisModel::where('store_id',Session::get('shop_id'))->field('id,username,mobile')->select();        $project =  new StoreProject ;        $project_list = $project->select();        return [            'project_list'  => $project_list,            'infoclass'     => $infoclass,            'member_list'   => $member_list,        ];	}    /**     * [delete description]删除方法 多选和单选删除     * @return [type] [description]     */	public function delete(){		if (Request::instance()->isPOST())		{			$id = Request::instance()->post('id/a'); // (/a)方法 将收到的id转为数组			$delmodel = ThisModel::destroy($id);			if($delmodel){			    $this->success('删除成功', 'shop/User/index');			}			else{				$this->error($delmodel->getError());			}	    }	    else{	    	$this->error('请求方式出错!');	    }	}    /**     * [renewfield description]列表更新字段     * @return [type] [description]     */	public function renewfield(){		if (Request::instance()->isPOST())		{            $data = Request::instance()->post();			$validate = validate('User');			$post = Request::instance()->except(['id'],'post');			$post = array_keys($post);            $validate->scene('edit', $post);			if(!$validate->scene('edit')->check($data)){			    $this->error($validate->getError());			}	        $this_model = new ThisModel();	        if($this_model->update($data))            {			    $this->success('更新成功', 'shop/User/index');			}			else{				$this->error($this_model->getError());			}		}	    else{	    	$this->error('请求方式出错!');	    }	}}