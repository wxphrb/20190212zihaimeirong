<?phpnamespace app\shop\controller;use think\Db;use think\Request;use think\Session;use think\Url;use app\shop\model\StoreRecord as ThisModel;use app\shop\model\StoreMember;class Project extends Base{    /**	 * [index description]列表	 * @return [type] [description]	 */	public function index()	{        $where = ['r.type'=>0];        $list2 = [];        if (Request::instance()->isPost()) {            $name = Request::instance()->param('name');            if ($name) {                $where = [                    'm.mobile' => ['like', '%' . $name . '%'],                ];                $where2 = [                    'mobile' => ['like', '%' . $name . '%'],                ];                $this->assign('name',$name);            }            $StoreMember = new StoreMember;            $list2 = $StoreMember->where($where2)->select();        }		$data = ThisModel::alias('r')                ->join('store_member m','r.member_id=m.id','right')                ->where('r.store_id',Session::get('shop_id'))                ->where($where)                ->field('m.username,m.mobile,m.account,r.money,r.content,r.create_time,r.id,r.type,r.member_lv,r.member_id,m.level_lv')                ->order('r.id', 'desc')->select();        return $this->fetch('index', [            'list'    => $data,            'list2'   => $list2        ]);	}	/**     * [create description]添加方法     * @return [type] [description]     */	public function create()	{		if (Request::instance()->isPOST())		{			$data = Request::instance()->post();			$result = ThisModel::saveVerify($data);			if (true === $result) {                $this->success('新建成功', 'shop/project/index');            } else {                $this->error($result);            }		}		$param = $this->appendarg();		return $this->fetch('create', $param);	}    /**     * [update description]更新方法     * @param  [type] $id [description]主键id     * @return [type]     [description]     */	public function update($id)	{		if (Request::instance()->isPOST())		{			$data = Request::instance()->post();            $ins_data = [];            //wcc($data);            foreach($data['con'] as $k=>$v){                if(empty($v) || empty($data['num'][$k]) ){                    $this->error('参数不完整', 'shop/project/index');                }                $content[] = [                    'con'=>$v,                    'num'=>$data['num'][$k],                    'pid'=>$data['pid'][$k],                ];            }            $data['content'] = serialize($content);            //添加消费记录            $res       =  db('store_member')->where(['id'=>$id,'store_id'=>Session::get('shop_id')])->find();            $r_content = unserialize($res['content']);            foreach ($r_content as $k=>$v){                $num =$v['num'] - $content[$k]['num'];                if($num >0){                    $ins_data[] = [                        'store_id' => Session::get('shop_id'),                        'money'    => 0,                        'goods_id' => $v['pid'],                        'content' => '使用'.$v['con'],                        'create_time' => time(),                        'type'      => 0,                        'member_lv' => $res['level_lv'],                        'member_id' => $id,                    ];                }            }            $record = new ThisModel;            if(!empty($ins_data)){                $record->saveAll($ins_data);            }            $StoreMember = new StoreMember;            $result = $StoreMember->validate(true)->allowField(true)->isUpdate(true)->save($data);			if ($result) {                $this->success('更新成功', 'shop/project/index');            } else {                $this->error($result);            }		}		$data = db('store_member')->where(['id'=>$id,'store_id'=>Session::get('shop_id')])->find();        $data['content'] = unserialize($data['content']);		$param = array_merge(['vo'=>$data], $this->appendarg());		return $this->fetch('create', $param);	}    /**     * 添加修改时候需要传递参数的话，用此方法，只写一遍     */	public function appendarg(){	    //$prov_data = db::name('cn_prov')->field('code,name')->select();        $infoclass = [                ['id'=>0,'title'=>'普通用户'],                ['id'=>1,'title'=>'银卡'],                ['id'=>2,'title'=>'金卡'],                ['id'=>3,'title'=>'钻石卡'],                ];        return [            'infoclass' => $infoclass,        ];	}    /**     * [delete description]删除方法 多选和单选删除     * @return [type] [description]     */	public function delete(){		if (Request::instance()->isPOST())		{			$id = Request::instance()->post('id/a'); // (/a)方法 将收到的id转为数组			$delmodel = ThisModel::destroy($id);			if($delmodel){			    $this->success('删除成功', 'shop/project/index');			}			else{				$this->error($delmodel->getError());			}	    }	    else{	    	$this->error('请求方式出错!');	    }	}    /**     * [renewfield description]列表更新字段     * @return [type] [description]     */	public function renewfield(){		if (Request::instance()->isPOST())		{            $data = Request::instance()->post();			$validate = validate('User');			$post = Request::instance()->except(['id'],'post');			$post = array_keys($post);            $validate->scene('edit', $post);			if(!$validate->scene('edit')->check($data)){			    $this->error($validate->getError());			}	        $this_model = new ThisModel();	        if($this_model->update($data))            {			    $this->success('更新成功', 'shop/project/index');			}			else{				$this->error($this_model->getError());			}		}	    else{	    	$this->error('请求方式出错!');	    }	}}